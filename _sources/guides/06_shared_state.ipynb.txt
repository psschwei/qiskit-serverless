{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fda54a1b-cca5-42e8-8ce5-bb6cba55d4b8",
   "metadata": {},
   "source": [
    "# Guide: state handling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "04c6a8de-56d8-47e0-9632-a2878c8bc974",
   "metadata": {},
   "source": [
    "There are situations when you need to handle imformation flow between jobs or tasks in a workflow.\n",
    "For that purposes we provide `StateHandler`s. One of the out-of-the-box handler is `RedisStateHandler`.\n",
    "\n",
    "Let's see an example of using state handler within job to share information."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "17249fca-4bfc-4776-82f6-d9b44d93303b",
   "metadata": {},
   "source": [
    "> NOTE: to run this example you must have ray head node and redis server up and running.\n",
    "> You can use docker-compose to do so."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8567a5f8-f949-4145-8e7d-eb7f78108f5a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from quantum_serverless import QuantumServerless, Program\n",
    "from quantum_serverless.core.state import RedisStateHandler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a8a68b12-fe62-4b62-97df-999e5811af64",
   "metadata": {},
   "source": [
    "Let's create serverlss object and redis handler object"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e7a0bca1-5d05-4e2a-96b3-66f8ef723452",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<QuantumServerless | providers [local, docker]>"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "serverless = QuantumServerless({\n",
    "    \"providers\": [{\n",
    "        \"name\": \"docker\",\n",
    "        \"compute_resource\": {\n",
    "            \"name\": \"docker\",\n",
    "            \"host\": \"localhost\",\n",
    "        }\n",
    "    }]\n",
    "})\n",
    "serverless"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a4bfff67-be65-4b3a-80f2-d0696e3190de",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<RedisStateHandler | localhost:6379>"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_handler = RedisStateHandler(\"localhost\", 6379)\n",
    "state_handler"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fd083ba3-0035-4ff9-8e88-c3957cb5bc07",
   "metadata": {},
   "source": [
    "We will be running following [job](./job_with_state.py).\n",
    "\n",
    "```python\n",
    "# job_with_state.py\n",
    "from quantum_serverless import QuantumServerless, run_qiskit_remote, get\n",
    "\n",
    "from quantum_serverless.core.state import RedisStateHandler\n",
    "\n",
    "state_handler = RedisStateHandler(\"redis\", 6379)\n",
    "serverless = QuantumServerless()\n",
    "\n",
    "\n",
    "@run_qiskit_remote(state=state_handler)\n",
    "def func_with_state(state: RedisStateHandler, seed: int):\n",
    "    state.set(\"in_job\", {\"k\": seed})\n",
    "    return seed\n",
    "\n",
    "\n",
    "@run_qiskit_remote(state=state_handler)\n",
    "def other_func_with_state(state: RedisStateHandler, seed: int):\n",
    "    state.set(\"in_other_job\", {\"other_k\": seed})\n",
    "    return get(func_with_state(seed))\n",
    "\n",
    "\n",
    "with serverless.context():\n",
    "    result = get(other_func_with_state(42))  # no need to pass state as it is handled in decorator\n",
    "\n",
    "print(result)\n",
    "```"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "bfb0a660-7354-446e-b14b-0dc97e883134",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Job | fqs_33de200c-d56b-4e59-89fc-a658ee94f9e3>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "program = Program(\n",
    "    name=\"job_with_state\",\n",
    "    entrypoint=\"job_with_state.py\"\n",
    ")\n",
    "\n",
    "job = serverless.run_program(program)\n",
    "job"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "6c9d41a6-cedf-4064-a1ea-fa9441c6ed9a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<JobStatus.SUCCEEDED: 'SUCCEEDED'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "job.status()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3d3a7c9e-3cd9-46b6-86c6-3281f0e7f15a",
   "metadata": {},
   "source": [
    "As you can see from job code we saved 2 enries in our state handler `in_job` and `in_other_job`. And because we are using same handler with the same redis instance we can access stored information, by calling `get` on handler instance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "cb0acc2d-85c8-4850-a7ee-4af1f837b3fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "({'k': 42}, {'other_k': 42})"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "state_handler.get(\"in_job\"), state_handler.get(\"in_other_job\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
