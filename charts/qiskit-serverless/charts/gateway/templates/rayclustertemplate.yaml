apiVersion: v1
kind: ConfigMap
metadata:
  name: rayclustertemplate
data:
  rayclustertemplate.yaml: |
    apiVersion: ray.io/v1
    kind: RayCluster
    metadata:
      name: {{`{{ cluster_name }}`}}
      namespace: {{ .Release.Namespace }}
{{- if .Values.application.limits.keepClusterOnComplete }}
      labels:
        nodelete: "true"
{{- end }}
      annotations:
        user: {{`{{ user }}`}}
    spec:
{{- if .Values.application.ray.scrapeWithPrometheus }}
      headServiceAnnotations:
        prometheus.io/scrape: "true"
{{- end }}
      enableInTreeAutoscaling: {{`{{ auto_scaling }}`}}
      headGroupSpec:
        rayStartParams:
          dashboard-host: 0.0.0.0
{{- if .Values.application.ray.openTelemetry }}
          tracing-startup-hook: "qiskit_serverless.core.tracing:setup_tracing"
{{- end }}
        serviceType: ClusterIP
        template:
{{- if .Values.application.ray.scrapeWithPrometheus }}
          metadata:
            annotations:
              prometheus.io/scrape: "true"
{{- end }}
          spec:
            initContainers:
              # Generate head's private key and certificate before `ray start`.
{{- if .Values.useCertManager }}
              - name: ray-head-cert
                image: {{ .Values.application.ray.kubectlImage }}
                command: ["/bin/sh", "-c", "/etc/gen/tls/gencert_cert_head.sh /tmp/tls {{`{{ cluster_name }}`}} $POD_IP {{ .Release.Namespace }}"]
                volumeMounts:
                  - mountPath: /tmp/tls
                    name: cert-tls
                  - mountPath: /etc/gen/tls
                    name: gen-tls-script
                env:
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
{{- else }}
              - name: ray-head-tls
                image: {{ .Values.application.ray.opensslImage }}
                command: ["/bin/sh", "-c", "cp -R /etc/ca/tls /etc/ray && /etc/gen/tls/gencert_head.sh"]
                volumeMounts:
                  - mountPath: /etc/ca/tls
                    name: ca-tls
                    readOnly: true
                  - mountPath: /etc/ray/tls
                    name: ray-tls
                  - mountPath: /etc/gen/tls
                    name: gen-tls-script
                env:
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
{{- end }}
{{- if .Values.application.proxy.enabled }}
              - name: iptables
                image: {{ .Values.application.proxy.initImage }}
                command: ["sh", "-c", "/var/iptables/iptables.sh"]
                volumeMounts:
                  - mountPath: /var/iptables
                    name: iptables
                securityContext:
                  privileged: true
                  capabilities:
                    add: ["NET_ADMIN"]
{{- end }}
            affinity:
            containers:
            - image: {{`{{ node_image }}`| quote  }}
              imagePullPolicy: IfNotPresent
              name: ray-head
              ports:
              - containerPort: 6379
                name: gcs
                protocol: TCP
              - containerPort: 8265
                name: dashboard
                protocol: TCP
              - containerPort: 10001
                name: client
                protocol: TCP
              resources:
                limits:
                  cpu: {{ .Values.application.ray.cpu }}
                  memory: {{ .Values.application.ray.memory }}Gi
                requests:
                  cpu: {{ .Values.application.ray.cpu }}
                  memory: {{ .Values.application.ray.memory }}Gi
              securityContext:
              volumeMounts:
              - mountPath: /tmp/ray
                name: log-volume
              - mountPath: /etc/ca/tls
                name: ca-tls
                readOnly: true
              - mountPath: /etc/ray/tls
                name: ray-tls
{{- if .Values.useCertManager }}
              - mountPath: /tmp/tls
                name: cert-tls
{{- end }}
              - mountPath: /data
                name: user-storage
                subPath: {{`{{ user_id }}`}}
              env:
                # Environment variables for Ray TLS authentication.
                # See https://docs.ray.io/en/latest/ray-core/configure.html#tls-authentication for more details.
{{- if .Values.application.ray.useTLS }}
                - name: RAY_USE_TLS
                  value: "1"
{{- end }}
{{- if .Values.useCertManager }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/tmp/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/tmp/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/tmp/tls/ca.crt"
{{- else }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/etc/ray/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/etc/ray/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/etc/ca/tls/ca.crt"
{{- end }}
{{- if .Values.application.ray.openTelemetry }}
                - name: OT_RAY_TRACER
                  value: "1"
{{- end }}
{{- if .Values.application.ray.openTelemetryCollector.local }}
                - name: OT_JAEGER_HOST_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.host }}
                - name: OT_JAEGER_PORT_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.port | quote }}
                - name: OT_INSECURE
                  value: {{ .Values.application.ray.openTelemetryCollector.insecure | quote }}
                - name: OT_ENABLED
                  value: {{ .Values.application.ray.openTelemetryCollector.enabled | quote }}
{{- end }}
{{- if .Values.application.proxy.enabled }}
            - image: {{ .Values.application.ray.proxyImage }}
              securityContext:
                runAsGroup: 123
              imagePullPolicy: IfNotPresent
              name: proxy
              resources:
                limits:
                  cpu: {{ .Values.application.proxy.cpu }}
                  memory: {{ .Values.application.proxy.memory }}Gi
              volumeMounts:
              - mountPath: /tmp/ray
                name: log-volume
              - mountPath: /etc/ca/tls
                name: ca-tls
                readOnly: true
              - mountPath: /etc/ray/tls
                name: ray-tls
{{- if .Values.useCertManager }}
              - mountPath: /tmp/tls
                name: cert-tls
{{- end }}
              - mountPath: /data
                name: user-storage
                subPath: {{`{{ user_id }}`}}
              env:
                # Environment variables for Ray TLS authentication.
                # See https://docs.ray.io/en/latest/ray-core/configure.html#tls-authentication for more details.
                - name: DST_PROTOCOL
                  value: "https"
                - name: GATEWAY_URL
                  value: "gateway:8000"
{{- if .Values.application.ray.useTLS }}
                - name: RAY_USE_TLS
                  value: "1"
{{- end }}
{{- if .Values.useCertManager }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/tmp/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/tmp/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/tmp/tls/ca.crt"
{{- else }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/etc/ray/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/etc/ray/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/etc/ca/tls/ca.crt"
{{- end }}
{{- if .Values.application.ray.openTelemetry }}
                - name: OT_RAY_TRACER
                  value: "1"
{{- end }}
{{- if .Values.application.ray.openTelemetryCollector.local }}
                - name: OT_JAEGER_HOST_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.host }}
                - name: OT_JAEGER_PORT_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.port | quote }}
                - name: OT_INSECURE
                  value: {{ .Values.application.ray.openTelemetryCollector.insecure | quote }}
                - name: OT_ENABLED
                  value: {{ .Values.application.ray.openTelemetryCollector.enabled | quote }}
{{- end }}
{{- end }}
            imagePullSecrets: []
{{- if .Values.useCertManager }}
            serviceAccountName: ray-cluster-sa
            serviceAccount: ray-cluster-sa
{{- end }}
            nodeSelector:
            tolerations: []
            securityContext:
              fsGroup: 123
            volumes:
            - emptyDir:
              name: log-volume
            - configMap:
                name: fluentbit-config
              name: fluentbit-config
            # Secret `ca-tls` has the information of CA's private key and certificate.
            - name: ca-tls
              secret:
                secretName: ca-tls
            - name: ray-tls
              emptyDir: {}
            # `gencert_head.sh` is a script to generate head Pod's private key and head's certificate.
{{- if .Values.useCertManager }}
            - name: cert-tls
              emptyDir: {}
{{- end }}
            - name: gen-tls-script
              configMap:
                name: tls
                defaultMode: 0777
                items:
                - key: gencert_head.sh
                  path: gencert_head.sh
{{- if .Values.useCertManager }}
                - key: gencert_cert_head.sh
                  path: gencert_cert_head.sh
{{- end }}
            - name: user-storage
              persistentVolumeClaim:
                claimName: {{ .Values.cos.claimName }}
{{- if .Values.application.proxy.enabled }}
            - name: iptables
              configMap:
                name: proxy-iptables
                defaultMode: 0777
                items:
                - key: iptables.sh
                  path: iptables.sh
{{- end }}
      workerGroupSpecs:
      - groupName: g
        maxReplicas: {{`{{ max_workers }}`}}
        minReplicas: {{`{{ min_workers }}`}}
        rayStartParams:
          block: 'true'
        replicas: {{`{{ workers }}`}}
        template:
{{- if .Values.application.ray.scrapeWithPrometheus }}
          metadata:
            annotations:
              prometheus.io/scrape: "true"
{{- end }}
          spec:
            initContainers:
              # Generate worker's private key and certificate before `ray start`.
{{- if .Values.useCertManager }}
              - name: ray-worker-cert
                image: {{ .Values.application.ray.kubectlImage }}
                command: ["/bin/sh", "-c", "/etc/gen/tls/gencert_cert_worker.sh /tmp/tls {{`{{ cluster_name }}`}} $POD_IP"]
                volumeMounts:
                  - mountPath: /tmp/tls
                    name: cert-tls
                  - mountPath: /etc/gen/tls
                    name: gen-tls-script
                env:
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
{{- else }}
              - name: ray-worker-tls
                image: {{ .Values.application.ray.opensslImage }}
                command: ["/bin/sh", "-c", "cp -R /etc/ca/tls /etc/ray && /etc/gen/tls/gencert_worker.sh"]
                volumeMounts:
                  - mountPath: /etc/ca/tls
                    name: ca-tls
                    readOnly: true
                  - mountPath: /etc/ray/tls
                    name: ray-tls
                  - mountPath: /etc/gen/tls
                    name: gen-tls-script
                env:
                  - name: POD_IP
                    valueFrom:
                      fieldRef:
                        fieldPath: status.podIP
{{- end }}
{{- if .Values.application.proxy.enabled }}
              - name: iptables
                image: {{ .Values.application.proxy.initImage }}
                command: ["sh", "-c", "/var/iptables/iptables.sh"]
                volumeMounts:
                  - mountPath: /var/iptables
                    name: iptables
                securityContext:
                  privileged: true
                  capabilities:
                    add: ["NET_ADMIN"]

{{- end }}
            affinity:
            containers:
            - resources:
                limits:
                  cpu: 1
                  memory: 2G
                requests:
                  cpu: 1
                  memory: 2G
              securityContext: {}
              volumeMounts:
              - mountPath: /tmp/ray
                name: log-volume
              - mountPath: /etc/ca/tls
                name: ca-tls
                readOnly: true
              - mountPath: /etc/ray/tls
                name: ray-tls
              - mountPath: /data
                name: user-storage
                subPath: {{`{{ user_id }}`}}
{{- if .Values.useCertManager }}
              - mountPath: /tmp/tls
                name: cert-tls
{{- end }}
              env:
                # Environment variables for Ray TLS authentication.
                # See https://docs.ray.io/en/latest/ray-core/configure.html#tls-authentication for more details.
{{- if .Values.application.ray.useTLS }}
                - name: RAY_USE_TLS
                  value: "1"
{{- end }}
{{- if .Values.useCertManager }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/tmp/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/tmp/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/tmp/tls/ca.crt"
{{- else }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/etc/ray/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/etc/ray/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/etc/ca/tls/ca.crt"
{{- end }}
{{- if .Values.application.ray.openTelemetry }}
                - name: OT_RAY_TRACER
                  value: "1"
{{- end }}
{{- if .Values.application.ray.openTelemetryCollector.local }}
                - name: OT_JAEGER_HOST_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.host }}
                - name: OT_JAEGER_PORT_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.port | quote }}
                - name: OT_INSECURE
                  value: {{ .Values.application.ray.openTelemetryCollector.insecure | quote }}
                - name: OT_ENABLED
                  value: {{ .Values.application.ray.openTelemetryCollector.enabled | quote }}
{{- end }}
              image: {{`{{ node_image }}`| quote}}
              imagePullPolicy: IfNotPresent
              name: ray-worker
              resources:
                limits:
                  cpu: {{ .Values.application.ray.cpu }}
                  memory: {{ .Values.application.ray.memory }}Gi
                requests:
                  cpu: {{ .Values.application.ray.cpu }}
                  memory: {{ .Values.application.ray.memory }}Gi
              securityContext:
{{- if .Values.application.proxy.enabled }}
            - resources:
                limits:
                  cpu: 1
                  memory: 2G
                requests:
                  cpu: 1
                  memory: 2G
              volumeMounts:
              - mountPath: /tmp/ray
                name: log-volume
              - mountPath: /etc/ca/tls
                name: ca-tls
                readOnly: true
              - mountPath: /etc/ray/tls
                name: ray-tls
              - mountPath: /data
                name: user-storage
                subPath: {{`{{ user_id }}`}}
{{- if .Values.useCertManager }}
              - mountPath: /tmp/tls
                name: cert-tls
{{- end }}
              env:
                # Environment variables for Ray TLS authentication.
                # See https://docs.ray.io/en/latest/ray-core/configure.html#tls-authentication for more details.
                - name: DST_PROTOCOL
                  value: "https"
                - name: GATEWAY_URL
                  value: "gateway:8000"
{{- if .Values.application.ray.useTLS }}
                - name: RAY_USE_TLS
                  value: "1"
{{- end }}
{{- if .Values.useCertManager }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/tmp/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/tmp/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/tmp/tls/ca.crt"
{{- else }}
                - name: RAY_TLS_SERVER_CERT
                  value: "/etc/ray/tls/tls.crt"
                - name: RAY_TLS_SERVER_KEY
                  value: "/etc/ray/tls/tls.key"
                - name: RAY_TLS_CA_CERT
                  value: "/etc/ca/tls/ca.crt"
{{- end }}
{{- if .Values.application.ray.openTelemetry }}
                - name: OT_RAY_TRACER
                  value: "1"
{{- end }}
{{- if .Values.application.ray.openTelemetryCollector.local }}
                - name: OT_JAEGER_HOST_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.host }}
                - name: OT_JAEGER_PORT_KEY
                  value: {{ .Values.application.ray.openTelemetryCollector.port | quote }}
                - name: OT_INSECURE
                  value: {{ .Values.application.ray.openTelemetryCollector.insecure | quote }}
                - name: OT_ENABLED
                  value: {{ .Values.application.ray.openTelemetryCollector.enabled | quote }}
{{- end }}
              image: {{ .Values.application.ray.proxyImage }}
              imagePullPolicy: IfNotPresent
              name: proxy
              resources:
                limits:
                  cpu: {{ .Values.application.proxy.cpu }}
                  memory: {{ .Values.application.proxy.memory }}Gi
              securityContext:
                runAsGroup: 123
{{- end }}
            imagePullSecrets: []
{{- if .Values.useCertManager }}
            serviceAccountName: ray-cluster-sa
            serviceAccount: ray-cluster-sa
{{- end }}
            nodeSelector:
            tolerations: []
            securityContext:
              fsGroup: 123
            volumes:
            - emptyDir:
              name: log-volume
            - name: ca-tls
              secret:
                secretName: ca-tls
            - name: ray-tls
              emptyDir: {}
{{- if .Values.useCertManager }}
            - name: cert-tls
              emptyDir: {}
{{- end }}
            # `gencert_worker.sh` is a script to generate worker Pod's private key and worker's certificate.
            - name: gen-tls-script
              configMap:
                name: tls
                defaultMode: 0777
                # An array of keys from the ConfigMap to create as files
                items:
                - key: gencert_worker.sh
                  path: gencert_worker.sh
{{- if .Values.useCertManager }}
                - key: gencert_cert_worker.sh
                  path: gencert_cert_worker.sh
{{- end }}
            - name: user-storage
              persistentVolumeClaim:
                claimName: {{ .Values.cos.claimName }}
{{- if .Values.application.proxy.enabled }}
            - name: iptables
              configMap:
                name: proxy-iptables
                defaultMode: 0777
                items:
                - key: iptables.sh
                  path: iptables.sh
{{- end }}
  rayjobtemplate.yaml: |
    apiVersion: ray.io/v1
    kind: RayJob
    metadata:
      name: rayjob-sample
    spec:
      # submissionMode specifies how RayJob submits the Ray job to the RayCluster.
      # The default value is "K8sJobMode", meaning RayJob will submit the Ray job via a submitter Kubernetes Job.
      # The alternative value is "HTTPMode", indicating that KubeRay will submit the Ray job by sending an HTTP request to the RayCluster.
      # submissionMode: "K8sJobMode"
      entrypoint: python /home/ray/samples/sample_code.py
      # shutdownAfterJobFinishes specifies whether the RayCluster should be deleted after the RayJob finishes. Default is false.
      shutdownAfterJobFinishes: true

      # ttlSecondsAfterFinished specifies the number of seconds after which the RayCluster will be deleted after the RayJob finishes.
      ttlSecondsAfterFinished: 10

      # activeDeadlineSeconds is the duration in seconds that the RayJob may be active before
      # KubeRay actively tries to terminate the RayJob; value must be positive integer.
      # activeDeadlineSeconds: 120

      # RuntimeEnvYAML represents the runtime environment configuration provided as a multi-line YAML string.
      # See https://docs.ray.io/en/latest/ray-core/handling-dependencies.html for details.
      # (New in KubeRay version 1.0.)
      runtimeEnvYAML: |
        pip:
          - requests==2.26.0
          - pendulum==2.1.2
        env_vars:
          counter_name: "test_counter"

      # Suspend specifies whether the RayJob controller should create a RayCluster instance.
      # If a job is applied with the suspend field set to true, the RayCluster will not be created and we will wait for the transition to false.
      # If the RayCluster is already created, it will be deleted. In the case of transition to false, a new RayCluste rwill be created.
      # suspend: false

      # rayClusterSpec specifies the RayCluster instance to be created by the RayJob controller.
      rayClusterSpec:
        rayVersion: '2.30.0' # should match the Ray version in the image of the containers
        # Ray head pod template
        headGroupSpec:
          # The `rayStartParams` are used to configure the `ray start` command.
          # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
          # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
          rayStartParams:
            dashboard-host: '0.0.0.0'
          #pod template
          template:
            spec:
              containers:
                - name: ray-head
                  image: icr.io/quantum-public/qiskit-serverless/ray-node:0.12.0-py310
                  ports:
                    - containerPort: 6379
                      name: gcs-server
                    - containerPort: 8265 # Ray dashboard
                      name: dashboard
                    - containerPort: 10001
                      name: client
                  resources:
                    limits:
                      cpu: "1"
                    requests:
                      cpu: "200m"
                  volumeMounts:
                    - mountPath: /home/ray/samples
                      name: code-sample
              volumes:
                # You set volumes at the Pod level, then mount them into containers inside that Pod
                - name: code-sample
                  configMap:
                    # Provide the name of the ConfigMap you want to mount.
                    name: ray-job-code-sample
                    # An array of keys from the ConfigMap to create as files
                    items:
                      - key: sample_code.py
                        path: sample_code.py
        workerGroupSpecs:
          # the pod replicas in this group typed worker
          - replicas: 1
            minReplicas: 1
            maxReplicas: 5
            # logical group name, for this called small-group, also can be functional
            groupName: small-group
            # The `rayStartParams` are used to configure the `ray start` command.
            # See https://github.com/ray-project/kuberay/blob/master/docs/guidance/rayStartParams.md for the default settings of `rayStartParams` in KubeRay.
            # See https://docs.ray.io/en/latest/cluster/cli.html#ray-start for all available options in `rayStartParams`.
            rayStartParams: {}
            #pod template
            template:
              spec:
                containers:
                  - name: ray-worker # must consist of lower case alphanumeric characters or '-', and must start and end with an alphanumeric character (e.g. 'my-name',  or '123-abc'
                    image: icr.io/quantum-public/qiskit-serverless/ray-node:0.12.0-py310
                    lifecycle:
                      preStop:
                        exec:
                          command: [ "/bin/sh","-c","ray stop" ]
                    resources:
                      limits:
                        cpu: "1"
                      requests:
                        cpu: "200m"
      # SubmitterPodTemplate is the template for the pod that will run the `ray job submit` command against the RayCluster.
      # If SubmitterPodTemplate is specified, the first container is assumed to be the submitter container.
      # submitterPodTemplate:
      #   spec:
      #     restartPolicy: Never
      #     containers:
      #       - name: my-custom-rayjob-submitter-pod
      #         image: rayproject/ray:2.9.0
      #         # If Command is not specified, the correct command will be supplied at runtime using the RayJob spec `entrypoint` field.
      #         # Specifying Command is not recommended.
      #         # command: ["sh", "-c", "ray job submit --address=http://$RAY_DASHBOARD_ADDRESS --submission-id=$RAY_JOB_SUBMISSION_ID -- echo hello world"]
